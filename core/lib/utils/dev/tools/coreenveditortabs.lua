CoreEnvEditor = CoreEnvEditor or class()
function CoreEnvEditor:create_interface()
	self:add_post_processors_param("hdr_post_processor", "tone_mapping", "$template_mix", DummyWidget:new(""))
	local gui = self:add_post_processors_param("fog_processor", "fog", "start_color", EnvEdColorBox:new(self, self:get_tab("Post Processor"), "Color"))
	self:add_gui_element(gui, "Post Processor", "Fog Post Processor")
	gui = self:add_post_processors_param("fog_processor", "fog", "start_color_scale", SingelSlider:new(self, self:get_tab("Post Processor"), "Color Scale", nil, 0, 10000, 1000, 1000))
	self:add_gui_element(gui, "Post Processor", "Fog Post Processor")
	gui = self:add_post_processors_param("fog_processor", "fog", "alpha0", SingelSlider:new(self, self:get_tab("Post Processor"), "Alpha Start", nil, 0, 1000, 1000, 10))
	self:add_gui_element(gui, "Post Processor", "Fog Post Processor")
	gui = self:add_post_processors_param("fog_processor", "fog", "alpha1", SingelSlider:new(self, self:get_tab("Post Processor"), "Alpha End", nil, 0, 1000, 1000, 10))
	self:add_gui_element(gui, "Post Processor", "Fog Post Processor")
	gui = self:add_post_processors_param("fog_processor", "fog", "start", SingelSlider:new(self, self:get_tab("Post Processor"), "Start", nil, 0, 1000, 1000, 1000))
	self:add_gui_element(gui, "Post Processor", "Fog Post Processor")
	gui = self:add_post_processors_param("fog_processor", "fog", "end0", SingelSlider:new(self, self:get_tab("Post Processor"), "End", nil, 0, 1000, 1000, 1000))
	self:add_gui_element(gui, "Post Processor", "Fog Post Processor")
	gui = self:add_post_processors_param("fog_processor", "fog", "end1", SingelSlider:new(self, self:get_tab("Post Processor"), "Curve", nil, 0, 1000, 1000, 250))
	self:add_gui_element(gui, "Post Processor", "Fog Post Processor")
	gui = self:add_post_processors_param("deferred", "shadow", "fadeout_blend", SingelSlider:new(self, self:get_tab("Global Illumination"), "Fadeout Blend", nil, 0, 1000, 1000, 10))
	self:add_gui_element(gui, "Global Illumination", "Shadow")
	gui = self:add_sky_param("sun_ray_color", EnvEdColorBox:new(self, self:get_tab("Global Illumination"), "Sun Color"))
	self:add_gui_element(gui, "Global Illumination", "Global Lighting")
	gui = self:add_sky_param("sun_ray_color_scale", SingelSlider:new(self, self:get_tab("Global Illumination"), "Sun Intensity", nil, 0, 10000, 1000, 1000))
	self:add_gui_element(gui, "Global Illumination", "Global Lighting")
	gui = self:add_post_processors_param("deferred", "apply_ambient", "ambient_color", EnvEdColorBox:new(self, self:get_tab("Global Illumination"), "AlbedoCC Color"))
	self:add_gui_element(gui, "Global Illumination", "Global Lighting")
	gui = self:add_post_processors_param("deferred", "apply_ambient", "ambient_falloff_scale", SingelSlider:new(self, self:get_tab("Global Illumination"), "AlbedoCC Blend", nil, 0, 1000, 1000, 1000))
	self:add_gui_element(gui, "Global Illumination", "Global Lighting")
	gui = self:add_post_processors_param("deferred", "apply_ambient", "ambient_scale", SingelSlider:new(self, self:get_tab("Global Illumination"), "Dynamic Light Scale", nil, 0, 10000, 1000, 1000))
	self:add_gui_element(gui, "Global Illumination", "Global Lighting")
	gui = self:add_post_processors_param("deferred", "apply_ambient", "sky_top_color", EnvEdColorBox:new(self, self:get_tab("Global Illumination"), "Ambient Top Color"))
	self:add_gui_element(gui, "Global Illumination", "Global Lighting")
	gui = self:add_post_processors_param("deferred", "apply_ambient", "sky_top_color_scale", SingelSlider:new(self, self:get_tab("Global Illumination"), "Ambient Top Scale", nil, 0, 10000, 1000, 1000))
	self:add_gui_element(gui, "Global Illumination", "Global Lighting")
	gui = self:add_post_processors_param("deferred", "apply_ambient", "sky_bottom_color", EnvEdColorBox:new(self, self:get_tab("Global Illumination"), "Ambient Bottom Color"))
	self:add_gui_element(gui, "Global Illumination", "Global Lighting")
	gui = self:add_post_processors_param("deferred", "apply_ambient", "sky_bottom_color_scale", SingelSlider:new(self, self:get_tab("Global Illumination"), "Ambient Bottom Scale", nil, 0, 10000, 1000, 1000))
	self:add_gui_element(gui, "Global Illumination", "Global Lighting")
	gui = self:add_post_processors_param("deferred", "apply_ambient", "effect_light_scale", SingelSlider:new(self, self:get_tab("Global Illumination"), "Effect Lighting Scale", nil, 0, 10000, 1000, 1000))
	self:add_gui_element(gui, "Global Illumination", "Global Lighting")
	local gui = self:add_underlay_param("sun", "sun_color", EnvEdColorBox:new(self, self:get_tab("Skydome"), "Sun Color"))
	self:add_gui_element(gui, "Skydome", "Sun")
	gui = self:add_underlay_param("sun", "sun_color_scale", SingelSlider:new(self, self:get_tab("Skydome"), "Sun Color Scale", nil, 0, 10000, 1000, 1000))
	self:add_gui_element(gui, "Skydome", "Sun")
	gui = self:add_underlay_param("sky_top", "sky_intensity", SingelSlider:new(self, self:get_tab("Skydome"), "Sky top intensity", nil, 0, 10000, 1000, 1000))
	self:add_gui_element(gui, "Skydome", "Sky")
	gui = self:add_underlay_param("sky_bottom", "sky_intensity", SingelSlider:new(self, self:get_tab("Skydome"), "Sky bottom intensity", nil, 0, 10000, 1000, 1000))
	self:add_gui_element(gui, "Skydome", "Sky")
	gui = self:add_underlay_param("sky", "color0", EnvEdColorBox:new(self, self:get_tab("Skydome"), "Color Top"))
	self:add_gui_element(gui, "Skydome", "Sky")
	gui = self:add_underlay_param("sky", "color0_scale", SingelSlider:new(self, self:get_tab("Skydome"), "Color Top Scale", nil, 0, 10000, 1000, 1000))
	self:add_gui_element(gui, "Skydome", "Sky")
	gui = self:add_underlay_param("sky", "color1", EnvEdColorBox:new(self, self:get_tab("Skydome"), "Color Mid"))
	self:add_gui_element(gui, "Skydome", "Sky")
	gui = self:add_underlay_param("sky", "color1_scale", SingelSlider:new(self, self:get_tab("Skydome"), "Color Mid Scale", nil, 0, 10000, 1000, 1000))
	self:add_gui_element(gui, "Skydome", "Sky")
	gui = self:add_underlay_param("sky", "color2", EnvEdColorBox:new(self, self:get_tab("Skydome"), "Color Low"))
	self:add_gui_element(gui, "Skydome", "Sky")
	gui = self:add_underlay_param("sky", "color2_scale", SingelSlider:new(self, self:get_tab("Skydome"), "Color Low Scale", nil, 0, 10000, 1000, 1000))
	self:add_gui_element(gui, "Skydome", "Sky")
	gui = self:add_underlay_param("cloud_overlay", "uv_velocity_rg_mask", Vector2Slider:new(self, self:get_tab("Skydome"), "UV Velocity RG Mask", nil, nil, 0, 1000, 1000))
	self:add_gui_element(gui, "Skydome", "Cloud Overlay")
	gui = self:add_underlay_param("cloud_overlay", "uv_velocity_b_mask", Vector2Slider:new(self, self:get_tab("Skydome"), "UV Velocity B Mask", nil, nil, 0, 1000, 1000))
	self:add_gui_element(gui, "Skydome", "Cloud Overlay")
	gui = self:add_underlay_param("cloud_overlay", "uv_scale_b_mask", SingelSlider:new(self, self:get_tab("Skydome"), "UV Scale B Mask", nil, 0, 1000, 1000))
	self:add_gui_element(gui, "Skydome", "Cloud Overlay")
	gui = self:add_underlay_param("cloud_overlay", "alpha_scale_sun", SingelSlider:new(self, self:get_tab("Skydome"), "Alpha Scale Sun", nil, 0, 1000, 1000))
	self:add_gui_element(gui, "Skydome", "Cloud Overlay")
	gui = self:add_underlay_param("cloud_overlay", "color_opposite_sun", EnvEdColorBox:new(self, self:get_tab("Skydome"), "Color Opposite Sun"))
	self:add_gui_element(gui, "Skydome", "Cloud Overlay")
	gui = self:add_underlay_param("cloud_overlay", "color_opposite_sun_scale", SingelSlider:new(self, self:get_tab("Skydome"), "Color Opposite Sun Scale", nil, 0, 10000, 1000, 1000))
	self:add_gui_element(gui, "Skydome", "Cloud Overlay")
	gui = self:add_underlay_param("cloud_overlay", "alpha_scale_opposite_sun", SingelSlider:new(self, self:get_tab("Skydome"), "Alpha Scale Opposite Sun", nil, 0, 10000, 1000, 1000))
	self:add_gui_element(gui, "Skydome", "Cloud Overlay")
	gui = self:add_underlay_param("cloud_overlay", "color_sun", EnvEdColorBox:new(self, self:get_tab("Skydome"), "Color Sun"))
	self:add_gui_element(gui, "Skydome", "Cloud Overlay")
	gui = self:add_underlay_param("cloud_overlay", "color_sun_scale", SingelSlider:new(self, self:get_tab("Skydome"), "Color Sun Scale", nil, 0, 10000, 1000, 1000))
	self:add_gui_element(gui, "Skydome", "Cloud Overlay")
	local gui = self:add_sky_param("underlay", PathBox:new(self, self:get_tab("Skydome"), "Underlay"))
	self:add_gui_element(gui, "Skydome", "Sky")
	gui = self:add_sky_param("sun_anim", SingelSlider:new(self, self:get_tab("Skydome"), "Sun Anim Y", nil, 0, 18000, 18000, 100, true))
	self:add_gui_element(gui, "Skydome", "Sky")
	gui = self:add_sky_param("sun_anim_x", SingelSlider:new(self, self:get_tab("Skydome"), "Sun Anim X", nil, 0, 36000, 36000, 100, true))
	self:add_gui_element(gui, "Skydome", "Sky")
	gui = self:add_sky_param("global_texture", DBPickDialog:new(self, self:get_tab("Skydome"), "Global Cubemap", "texture"))
	self:add_gui_element(gui, "Skydome", "Sky")
	gui = self:add_sky_param("flare_name", EnvEdEditBox:new(self, self:get_tab("Flare"), "Name"))
	self:add_gui_element(gui, "Flare", "Effect")
	gui = self:add_sky_param("flare_color", EnvEdColorBox:new(self, self:get_tab("Flare"), "Color"))
	self:add_gui_element(gui, "Flare", "Effect")
	gui = self:add_sky_param("flare_anim_y", SingelSlider:new(self, self:get_tab("Flare"), "Anim Y", nil, 0, 18000, 18000, 100))
	self:add_gui_element(gui, "Flare", "Effect")
	gui = self:add_sky_param("flare_anim_x", SingelSlider:new(self, self:get_tab("Flare"), "Anim X", nil, 0, 36000, 36000, 100))
	self:add_gui_element(gui, "Flare", "Effect")
	for i = 1, 8 do
		local num_str = tostring(i)
		gui = self:add_sky_param("flare_index_" .. num_str, SingelSlider:new(self, self:get_tab("Flare"), "Index", nil, 1, 4, 1, 1))
		self:add_gui_element(gui, "Flare", "Plane " .. num_str)
		gui = self:add_sky_param("flare_offset_" .. num_str, SingelSlider:new(self, self:get_tab("Flare"), "Offset", nil, -15000, 15000, 1000, 1000))
		self:add_gui_element(gui, "Flare", "Plane " .. num_str)
		gui = self:add_sky_param("flare_scale_" .. num_str, SingelSlider:new(self, self:get_tab("Flare"), "Scale", nil, 0, 10000, 1000, 1000))
		self:add_gui_element(gui, "Flare", "Plane " .. num_str)
		gui = self:add_sky_param("flare_alpha_" .. num_str, SingelSlider:new(self, self:get_tab("Flare"), "Alpha", nil, 0, 1000, 1000, 1000))
		self:add_gui_element(gui, "Flare", "Plane " .. num_str)
	end
end
function CoreEnvEditor:create_simple_interface()
	local gui = self:add_post_processors_param("hdr_post_processor", "tone_mapping", "$template_mix", EnvironmentEditorEnvMixer:new(self, self:get_tab("Global Illumination"), "Mix"))
	self:add_gui_element(gui, "Global Illumination", "Template")
	gui = self:add_post_processors_param("deferred", "apply_ambient", "ambient_color", EnvEdColorBox:new(self, self:get_tab("Global Illumination"), "Ambient Color", false))
	self:add_gui_element(gui, "Global Illumination", "Global Lighting")
	gui = self:add_post_processors_param("deferred", "apply_ambient", "sky_top_color", EnvEdColorBox:new(self, self:get_tab("Global Illumination"), "Sky Top Color", false))
	self:add_gui_element(gui, "Global Illumination", "Global Lighting")
	gui = self:add_post_processors_param("deferred", "apply_ambient", "sky_bottom_color", EnvEdColorBox:new(self, self:get_tab("Global Illumination"), "Sky Bottom Color", false))
	self:add_gui_element(gui, "Global Illumination", "Global Lighting")
	gui = self:add_post_processors_param("fog_processor", "fog", "start_color", EnvEdColorBox:new(self, self:get_tab("Post Processor"), "Color", false))
	self:add_gui_element(gui, "Post Processor", "Fog Post Processor")
	gui = self:add_post_processors_param("fog_processor", "fog", "alpha0", SingelSlider:new(self, self:get_tab("Post Processor"), "Alpha Start", nil, 0, 1000, 1000, 10))
	self:add_gui_element(gui, "Post Processor", "Fog Post Processor")
	gui = self:add_post_processors_param("fog_processor", "fog", "alpha1", SingelSlider:new(self, self:get_tab("Post Processor"), "Alpha End", nil, 0, 1000, 1000, 10))
	self:add_gui_element(gui, "Post Processor", "Fog Post Processor")
	gui = self:add_post_processors_param("fog_processor", "fog", "start", SingelSlider:new(self, self:get_tab("Post Processor"), "Start", nil, 0, 1000, 1000, 1000))
	self:add_gui_element(gui, "Post Processor", "Fog Post Processor")
	gui = self:add_post_processors_param("fog_processor", "fog", "end0", SingelSlider:new(self, self:get_tab("Post Processor"), "End", nil, 0, 1000, 1000, 1000))
	self:add_gui_element(gui, "Post Processor", "Fog Post Processor")
	gui = self:add_post_processors_param("fog_processor", "fog", "end1", SingelSlider:new(self, self:get_tab("Post Processor"), "Curve", nil, 0, 1000, 1000, 250))
	self:add_gui_element(gui, "Post Processor", "Fog Post Processor")
	self:add_post_processors_param(TemplateMixerDummy:new(self, "fog_processor", "fog", "start_color_scale"):args())
	self:add_post_processors_param(TemplateMixerDummy:new(self, "fog_processor", "fog", "start_color_scale"):args())
	self:add_post_processors_param(TemplateMixerDummy:new(self, "deferred", "shadow", "fadeout_blend"):args())
	self:add_post_processors_param(TemplateMixerDummy:new(self, "deferred", "apply_ambient", "sun_specular_color_scale"):args())
	self:add_post_processors_param(TemplateMixerDummy:new(self, "deferred", "apply_ambient", "ambient_scale"):args())
	self:add_post_processors_param(TemplateMixerDummy:new(self, "deferred", "apply_ambient", "ambient_falloff_scale"):args())
	self:add_post_processors_param(TemplateMixerDummy:new(self, "deferred", "apply_ambient", "sky_top_color_scale"):args())
	self:add_post_processors_param(TemplateMixerDummy:new(self, "deferred", "apply_ambient", "sky_bottom_color_scale"):args())
	self:add_post_processors_param(TemplateMixerDummy:new(self, "deferred", "apply_ambient", "effect_light_scale"):args())
	local gui = self:add_underlay_param("sun", "sun_color", EnvEdColorBox:new(self, self:get_tab("Skydome"), "Sun Color", false))
	self:add_gui_element(gui, "Skydome", "Sky")
	local gui = self:add_underlay_param("cloud_overlay", "sun_color", EnvEdColorBox:new(self, self:get_tab("Skydome"), "Sun Color", false))
	self:add_gui_element(gui, "Skydome", "Sky")
	gui = self:add_underlay_param("cloud_overlay", "color_sun", EnvEdColorBox:new(self, self:get_tab("Skydome"), "Color Sun", false))
	self:add_gui_element(gui, "Skydome", "Sky")
	gui = self:add_underlay_param("sky", "color0", EnvEdColorBox:new(self, self:get_tab("Skydome"), "Color Top", false))
	self:add_gui_element(gui, "Skydome", "Sky")
	gui = self:add_underlay_param("sky", "color1", EnvEdColorBox:new(self, self:get_tab("Skydome"), "Color Mid", false))
	self:add_gui_element(gui, "Skydome", "Sky")
	gui = self:add_underlay_param("sky", "color2", EnvEdColorBox:new(self, self:get_tab("Skydome"), "Color Low", false))
	self:add_gui_element(gui, "Skydome", "Sky")
	self:add_underlay_param(TemplateMixerDummy:new(self, "sun", "sun_color_scale"):args())
	self:add_underlay_param(TemplateMixerDummy:new(self, "sky", "color0_scale"):args())
	self:add_underlay_param(TemplateMixerDummy:new(self, "sky", "color1_scale"):args())
	self:add_underlay_param(TemplateMixerDummy:new(self, "sky", "color2_scale"):args())
	self:add_underlay_param(TemplateMixerDummy:new(self, "cloud_overlay", "sun_color"):args())
	self:add_underlay_param(TemplateMixerDummy:new(self, "cloud_overlay", "color_sun_scale"):args())
	self:add_underlay_param(TemplateMixerDummy:new(self, "cloud_overlay", "uv_velocity_rg_mask"):args())
	self:add_underlay_param(TemplateMixerDummy:new(self, "cloud_overlay", "uv_velocity_b_mask"):args())
	self:add_underlay_param(TemplateMixerDummy:new(self, "cloud_overlay", "uv_scale_b_mask"):args())
	self:add_underlay_param(TemplateMixerDummy:new(self, "cloud_overlay", "alpha_scale_sun"):args())
	self:add_underlay_param(TemplateMixerDummy:new(self, "cloud_overlay", "color_opposite_sun"):args())
	self:add_underlay_param(TemplateMixerDummy:new(self, "cloud_overlay", "color_opposite_sun_scale"):args())
	self:add_underlay_param(TemplateMixerDummy:new(self, "cloud_overlay", "alpha_scale_opposite_sun"):args())
	self:add_underlay_param(TemplateMixerDummy:new(self, "sky_top", "sky_intensity"):args())
	self:add_underlay_param(TemplateMixerDummy:new(self, "sky_bottom", "sky_intensity"):args())
	local gui = self:add_sky_param("sun_ray_color", EnvEdColorBox:new(self, self:get_tab("Global Illumination"), "Sun Color", false))
	self:add_gui_element(gui, "Global Illumination", "Global Lighting")
	self:add_post_processors_param("deferred", "apply_ambient", "sun_specular_color", FormulaMixerDummy:new(self, gui, FormulaMixerDummy.STD_TOL, CoreEnvEditor.lerp_formula))
	gui = self:add_sky_param("underlay", PathBox:new(self, self:get_tab("Skydome"), "Underlay"))
	self:add_gui_element(gui, "Skydome", "Sky")
	gui = self:add_sky_param("sun_anim", SingelSlider:new(self, self:get_tab("Skydome"), "Sun Anim Y", nil, 0, 18000, 18000, 100))
	self:add_gui_element(gui, "Skydome", "Sky")
	gui = self:add_sky_param("sun_anim_x", SingelSlider:new(self, self:get_tab("Skydome"), "Sun Anim X", nil, 0, 36000, 36000, 100))
	self:add_gui_element(gui, "Skydome", "Sky")
	gui = self:add_sky_param("global_texture", DBPickDialog:new(self, self:get_tab("Skydome"), "Global Cubemap", "texture"))
	self:add_gui_element(gui, "Skydome", "Sky")
	gui = self:add_sky_param("flare_name", EnvEdEditBox:new(self, self:get_tab("Flare"), "Name"))
	self:add_gui_element(gui, "Flare", "Effect")
	gui = self:add_sky_param("flare_color", EnvEdColorBox:new(self, self:get_tab("Flare"), "Color"))
	self:add_gui_element(gui, "Flare", "Effect")
	gui = self:add_sky_param("flare_anim_y", SingelSlider:new(self, self:get_tab("Flare"), "Anim Y", nil, 0, 18000, 18000, 100))
	self:add_gui_element(gui, "Flare", "Effect")
	gui = self:add_sky_param("flare_anim_x", SingelSlider:new(self, self:get_tab("Flare"), "Anim X", nil, 0, 36000, 36000, 100))
	self:add_gui_element(gui, "Flare", "Effect")
	for i = 1, managers.environment:num_flare_slices() do
		local num_str = tostring(i)
		gui = self:add_sky_param("flare_index_" .. num_str, SingelSlider:new(self, self:get_tab("Flare"), "Index", nil, 1, 4, 1, 1))
		self:add_gui_element(gui, "Flare", "Plane " .. num_str)
		gui = self:add_sky_param("flare_offset_" .. num_str, SingelSlider:new(self, self:get_tab("Flare"), "Offset", nil, -15000, 15000, 1000, 1000))
		self:add_gui_element(gui, "Flare", "Plane " .. num_str)
		gui = self:add_sky_param("flare_scale_" .. num_str, SingelSlider:new(self, self:get_tab("Flare"), "Scale", nil, 0, 10000, 1000, 1000))
		self:add_gui_element(gui, "Flare", "Plane " .. num_str)
		gui = self:add_sky_param("flare_alpha_" .. num_str, SingelSlider:new(self, self:get_tab("Flare"), "Alpha", nil, 0, 1000, 1000, 1000))
		self:add_gui_element(gui, "Flare", "Plane " .. num_str)
	end
	self:add_sky_param(TemplateMixerDummy:new(self, "sun_ray_color_scale"):args())
end
